/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdint.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_mem.h"
//#include "xparams.h"
#include "xparameters.h"
#include "xil_io.h"

typedef uint32_t u32;
typedef u32 b32;

#ifndef true
#define true (1)
#endif

#ifndef false
#define false (0)
#endif

#define MOTOR_ROTATION (400)

#define MOTOR_BASE ((u32*)(0x43C00000))
#define MOTOR_ENABLE_BIT (1 << 4)

#define MOTOR_A_STEP_BIT (1 << 0)
#define MOTOR_A_DIR_BIT  (1 << 1)
#define MOTOR_B_STEP_BIT (1 << 2)
#define MOTOR_B_DIR_BIT  (1 << 3)

#define MOTOR_SERVO_BIT (1<<5)

typedef enum Motor
{
	Motor_A,
	Motor_B,
} Motor;

#define MOTOR_A_READY (1<<0)
#define MOTOR_B_READY (1<<1)

u32 motor_state = 0;

void wait_for_motor(Motor motor_a)
{
#if 0
	u32 motor_ready;
	switch (motor_a)
	{
		case Motor_A: motor_ready = MOTOR_A_READY; break;
		case Motor_B: motor_ready = MOTOR_B_READY; break;
	}
	while (!((MOTOR_BASE[0] & motor_ready) == motor_ready));
#endif

	for (int i = 0; i < 100000;++i);
}

void step_motor(Motor motor)
{
	u32 step_bit;

	switch (motor)
	{
		case Motor_A: step_bit = MOTOR_A_STEP_BIT; break;
		case Motor_B: step_bit = MOTOR_B_STEP_BIT; break;
	}

	motor_state |= step_bit;
	MOTOR_BASE[0] = motor_state;
	wait_for_motor(motor);
	motor_state &= ~step_bit;
	MOTOR_BASE[0] = motor_state;
	wait_for_motor(motor);
}

int main()
{
    init_platform();

//    volatile unsigned int *motor = (volatile unsigned int *)0x43C000000;

    MOTOR_BASE[0] = motor_state;

    motor_state |= MOTOR_ENABLE_BIT;

    volatile int foob = MOTOR_BASE[0];

//    for (int i=0;i<800;++i)
    while(1)
    {
    	motor_state |= MOTOR_SERVO_BIT;
    	MOTOR_BASE[0] = motor_state;
    	motor_state &= ~MOTOR_A_DIR_BIT;
		MOTOR_BASE[0] = motor_state;
    	for (u32 i=0; i< MOTOR_ROTATION*2; ++i) step_motor(Motor_A);
    	motor_state &= ~MOTOR_SERVO_BIT;
		MOTOR_BASE[0] = motor_state;
    	motor_state |= MOTOR_A_DIR_BIT;
    	MOTOR_BASE[0] = motor_state;
    	for (u32 i=0; i< MOTOR_ROTATION*2; ++i) step_motor(Motor_A);
    	motor_state &= ~MOTOR_B_DIR_BIT;
		MOTOR_BASE[0] = motor_state;
    	for (u32 i=0; i< MOTOR_ROTATION*2; ++i) step_motor(Motor_B);
    	motor_state |= MOTOR_B_DIR_BIT;
		MOTOR_BASE[0] = motor_state;
		for (u32 i=0; i< MOTOR_ROTATION*2; ++i) step_motor(Motor_B);
    }

    print("Hello World\n\r");

    cleanup_platform();
    return 0;
}
